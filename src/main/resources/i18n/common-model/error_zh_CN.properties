################################################################################
#
#    Copyright (c) 2017 - 2022.
#    Nanjing Smart Medical Investment Operation Service Co. Ltd.
#
#    All rights reserved.
#
################################################################################

################################################################################
#
# 错误消息
#
# 模板格式说明:
# 1. 错误消息的key格式为 "error." + <错误代码ErrorCode枚举值小写形式>
# 2. 错误消息内容为前端实际向用户展示的消息字符串，其中可以包含参数占位符；
# 3. 参数占位符的形式为 "{" + <参数key> + "}"，例如 "{value}" 表示将用一个key为
#    "value"的参数的值来替换；
# 4. 参数来源于 ErrorInfo 对象的 "params" 属性值，该属性类型是一个 KeyValuePairList
# 5. 具体每个消息应该有哪些参数占位符，应参考该消息对应的错误代码所对应的错误异常类的实现。
#    例如，"error.blocked" 这条错误消息，对应的错误代码为 ErrorCode.BLOCKED，对应的
#    错误异常为 EntityBlockedException，根据其构造器实现我们发现它有三个参数，一个
#    key为"entity"，表示该错误对应的实体的类的名，注意其取值都被转化为小写下划线形式；
#    第二个参数的key为"key"，表示错误对应的实体对象的主键的属性名称，也被转换为小写下划
#    线形式；第三个参数的key为"value"，表示错误对应的实体对象的主键的属性值。假设
#    传递给 ErrorMessageFormatter 的参数为 [{key: "entity", value: "user"},
#    {key: "key", value: "username"}, {key: "value", value: "user-123"}]，则格
#    式化后的消息应该为："指定的用户已被屏蔽，请与管理员联系：user-123"。其中，实体名
#    "user"对应的消息字符串为"用户"，来自于 entity_zh_CN.properties 中的定义：
#    "entity.user = 用户"
#
################################################################################

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.ALREADY_BIND_USER
# Exception:  AlreadyBindUserException
# Parameters:
#   - entity:   指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:      指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:    指定的对象的主键值
#   - username: 指定的对象已绑定的用户的用户名
################################################################################
error.already_bind_user                 = 指定的{entity}已绑定了用户{username}：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.ALREADY_EXIST
# Exception:  DataAlreadyExistException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.already_exist                     = 指定的{entity}已存在：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.ALREADY_RETURNED
# Exception:  AlreadyReturnedException
# Parameters:
#   - buyer_name: 购买者姓名
#   - buyer_mobile: 购买者手机号码
#   - buyer_credential_type: 购买者证件类型
#   - buyer_credential_number: 购买者证件号码
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.already_returned                  = {buyer_name}购买过{product_name}，但已经退货

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.APPOINTMENT_CANNOT_DELETE
# Exception:  AppointmentDeleteException
# Parameters: None                      [TODO: 增加预约单信息作为异常参数]
################################################################################
error.appointment_cannot_delete         = 预约已生效，无法删除

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.APP_AUTHENTICATION_REQUIRED
# Exception:  AppAuthorizationRequiredException
# Parameters: None
################################################################################
error.app_authentication_required       = 当前应用未认证或令牌已过期，请重新认证

################################################################################
# Error Type: ErrorType.REQUEST_ERROR
# Error Code: ErrorCode.BAD_REQUEST
# Exception:  HttpMessageNotWritableException, HttpMessageNotReadableException,
# Parameters:
#   - message: 具体的错误消息
################################################################################
error.bad_request                       = 请求格式错误，请仔细核对API文档：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.BLOCKED
# Exception:  EntityBlockedException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.blocked                           = 指定的{entity}已被屏蔽，请与系统管理员联系：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.BLOCK_USER
# Exception:  BlockUserException         [TODO：异常类增加参数]
# Parameters: None
################################################################################
error.block_user                        = 您已将该用户屏蔽。

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.BLOCKED_BY_USER
# Exception:  BlockedByUserException     [TODO：异常类增加参数]
# Parameters: None
################################################################################
error.blocked_by_user                   = 该用户已将您屏蔽。

################################################################################
# Error Type: ErrorType.SERVER_ERROR
# Error Code: ErrorCode.CHAT_SERVER_ERROR
# Exception:  None                      [TODO：实现对应的异常类]
# Parameters:
#   - message: 具体的错误消息
################################################################################
error.chat_server_error                 = 聊天服务器发生错误，请与管理员联系：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.COMPLAINT_EXIST
# Exception:  None                      [TODO：实现对应的异常类]
# Parameters:
#   - entity: 被举报的实体类的名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.complaint_exist                   = 您已经用相同的原因举报过此{entity}，请勿重复举报

################################################################################
# Error Type: ErrorType.DATABASE_ERROR
# Error Code: ErrorCode.DATABASE_ERROR
# Exception:  DataUpdateFailException
# Parameters:
#   - table:   错误的数据库表的名称
#   - message: 具体的错误消息
################################################################################
error.database_error                    = 访问数据库发生错误，请与系统管理员联系：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DELETED
# Exception:  EntityDeletedException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.deleted                           = 指定的{entity}已被删除，请与系统管理员联系：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DELETE_CURRENT_USER
# Exception:  DeleteCurrentUserException
# Parameters:
#   - username:  被删除的当前用户的用户名
################################################################################
error.delete_current_user               = 不能删除当前已登录用户：{username}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DELETE_REFERENCED_FOREIGN_KEY
# Exception:  ForeignKeyConstraintFailException
# Parameters:
#   - reference_field:  待删除项被引用的属性名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.delete_referenced_foreign_key     = 待删除项的{reference_field}依然被其他对象所引用。

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DISABLED
# Exception:  EntityDisabledException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.disabled                          = 指定的{entity}已被禁用，请与系统管理员联系：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DUPLICATE_BUYER
# Exception:  DuplicateBuyerException
# Parameters:
#   - buyer_name: 购买者姓名
#   - buyer_mobile: 购买者手机号码
#   - buyer_credential_type: 购买者证件类型
#   - buyer_credential_number: 购买者证件号码
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.duplicate_buyer                   = {buyer_name}已存在于订单的购买者中，不可重复添加

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DUPLICATE_KEY
# Exception:  DuplicateKeyException
# Parameters:
#   - field:  重复的属性名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  重复的属性值
################################################################################
error.duplicate_key                     = 该{field}已存在：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DUPLICATE_PRODUCT
# Exception:  DuplicateProductException
# Parameters:
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.duplicate_product                 = 商品“{product_name}”已存在于订单中，不可重复添加

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.DUPLICATE_PURCHASE
# Exception:  DuplicateProductException
# Parameters:
#   - buyer_name: 购买者姓名
#   - buyer_mobile: 购买者手机号码
#   - buyer_credential_type: 购买者证件类型
#   - buyer_credential_number: 购买者证件号码
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.duplicate_purchase                = {buyer_name}已购买过“{product_name}”，请勿重复购买

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.EMPTY_FIELD
# Exception:  NullFieldException
# Parameters:
#   - field:  空属性名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.empty_field                       = {field}不能为空

################################################################################
# Error Type: ErrorType.SERVER_ERROR
# Error Code: ErrorCode.ENCODING_MESSAGE_FAILED
# Exception:  EncodingMessageFailedException
# Parameters:
#   - message: 具体的错误信息
################################################################################
error.encoding_message_failed           = 对消息进行编码时操作失败：{message}

################################################################################
# Error Type: ErrorType.THIRD_PART_ERROR
# Error Code: ErrorCode.EXPRESS_GENERATE_FAILURE
# Exception:  None                      [FIXME: 没有对应异常类，这个错误代码在哪里用到？另外名称不够清晰]
# Parameters:
#   - message: 具体的错误信息
################################################################################
error.express_generate_failure          = 快递系统调用失败：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.FIELD_OUT_OF_RANGE
# Exception:  FieldValueOutOfRangeException
# Parameters:
#   - field:  越界属性的名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.field_out_of_range                = {field}的取值超出允许的范围

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.FIELD_TOO_LONG
# Exception:  FieldTooLongException
# Parameters:
#   - field:  超长的属性的名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.field_too_long                    = {field}太长了。

################################################################################
# Error Type: ErrorType.IO_ERROR
# Error Code: ErrorCode.FILE_NOT_EXIST
# Exception:  FileNotExistException
# Parameters:
#   - path:    指定的文件的路径
#   - message: 具体的错误消息
################################################################################
error.file_not_exist                    = 指定的文件不存在：{path}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.FRIEND_EXIST
# Exception:  FriendExistException      [TODO：异常类增加参数]
# Parameters: None
################################################################################
error.friend_exist                      = 您已添加过此好友。

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.FRIEND_REQUEST_EXIST
# Exception:  None                      [TODO：增加对应的异常类]
# Parameters: None
################################################################################
error.friend_request_exist              = 加好友请求已存在。

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.GUARDED_NOT_RETURN
# Exception:  GuardedNotReturnException
# Parameters:
#   - guarded_name: 被监护人姓名
#   - guarded_credential_type: 被监护人证件类型
#   - guarded_credential_number: 被监护人证件号码
#   - guarded_birthday: 被监护人出生日期
################################################################################
error.guarded_not_return                    = 被监护人{guarded_name}\
（{guarded_credential_type}号码{guarded_credential_number}）须退款

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.GUARDIAN_IS_SELF
# Exception:  GuardianIsSelfException
# Parameters:
#   - id:                   指定的人的ID
#   - name:                 指定的人的姓名
#   - credential_type:      指定的人的证件类型
#   - credential_number:    指定的人的证件号码
################################################################################
error.guardian_is_self                  = {name}的监护人不能是他自己

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.GUARDIAN_NOT_BUY
# Exception:  GuardianNotBuyException
# Parameters:
#   - guardian_name: 监护人姓名
#   - guardian_mobile: 监护人手机号码
#   - guardian_credential_type: 监护人证件类型
#   - guardian_credential_number: 监护人证件号码
#   - guardian_birthday: 监护人出生日期
################################################################################
error.guardian_not_buy                  = 监护人{guardian_name}尚未购买，请先为监护人购买

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.GUARDIAN_IS_REFUNDING
# Exception:  GuardianRefundingException    [TODO: 重命名异常类为 GuardianIsRefundingException ]
# Parameters:
#   - guardian_name: 监护人姓名
#   - guardian_mobile: 监护人手机号码
#   - guardian_credential_type: 监护人证件类型
#   - guardian_credential_number: 监护人证件号码
#   - guardian_birthday: 监护人出生日期
################################################################################
error.guardian_is_refunding             = 监护人{guardian_name}正处于退款中，\
请等待退款完毕后先为该监护人重新购买，再为未成年人购买。或者更换一个已购买的监护人

################################################################################
# Error Type: ErrorType.NETWORK_ERROR
# Error Code: ErrorCode.HTTP_ERROR
# Exception:  RestClientException
# Parameters:
#   - message: 详细的错误信息
################################################################################
error.http_error                        = HTTP请求发生错误：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INACTIVE
# Exception:  EntityInactiveException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.inactive                          = 指定的{entity}未被激活，请与系统管理员联系：{value}

################################################################################
# Error Type: ErrorType.SERVER_ERROR
# Error Code: ErrorCode.INTERNAL_ERROR
# Exception:  Exception
# Parameters:
#   - message: 具体的错误消息
################################################################################
error.internal_error                    = 发生了一个内部错误，请与系统管理员联系: {message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_ENUM_VALUE
# Exception:  InvalidEnumValueException
# Parameters:
#   - entity: 指定的枚举对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的枚举对象的取值
################################################################################
error.invalid_enum_value                = {entity}的取值不在可选范围内：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_EMAIL_FORMAT
# Exception:  InvalidFieldFormatException
# Parameters:
#   - field:  指定的属性名，这里应固定为"email"
#   - value:  错误的属性值，即错误的电子邮件地址
################################################################################
error.invalid_email_format              = 电子邮件地址的格式不正确，请提供真实的电子邮件地址：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_EMAIL_FORMAT
# Exception:  InvalidFieldFormatException
# Parameters:
#   - field:  指定的属性名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  错误的属性值
################################################################################
error.invalid_field_format              = {field}的格式不正确：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_FIELD_VALUE
# Exception:  InvalidFieldValueException
# Parameters:
#   - field:  指定的字段名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  错误的取值
################################################################################
error.invalid_field_value               = {field}的值不正确：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_FIELD_VALUE_CHARACTER
# Exception:  InvalidFieldValueCharacterException
# Parameters:
#   - field:  指定的字段名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  错误的取值
################################################################################
error.invalid_field_value_character     = {field}的值包含非法字符：{value}

################################################################################
# Error Type: ErrorType.IO_ERROR
# Error Code: ErrorCode.INVALID_FILE_FORMAT
# Exception:  InvalidFileFormatException
# Parameters:
#   - message: 详细的错误信息
################################################################################
error.invalid_file_format               = 文件格式不正确：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_GUARDIAN_AGE
# Exception:  InvalidGuardianAgeException
# Parameters:
#   - guardian_name: 监护人姓名
#   - guardian_mobile: 监护人手机号码
#   - guardian_credential_type: 监护人证件类型
#   - guardian_credential_number: 监护人证件号码
#   - guardian_birthday: 监护人出生日期
################################################################################
error.invalid_guardian_age              = 监护人{guardian_name}必须是成年人

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_IDENTITY_CARD_FORMAT
# Exception:  InvalidIdentityCardFormatException
# Parameters:
#   - number:  错误的身份证号码
################################################################################
error.invalid_identity_card_format      = 身份证号码格式错误：{number}

################################################################################
# Error Type: ErrorType.IO_ERROR
# Error Code: ErrorCode.INVALID_JSON_FORMAT
# Exception:  InvalidJsonFormatException
# Parameters:
#   - json:    错误的JSON代码
#   - message: 详细的错误信息
################################################################################
error.invalid_json_format               = JSON数据格式不正确：{json}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_ORDER
# Exception:  InvalidOrderException
# Parameters:
#   - order_id: 订单ID
#   - product_id:  产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.invalid_order                     = 订单信息错误：{order_id}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_ORDER
# Exception:  InvalidOrderException
# Parameters:
#   - order_id: 订单ID
#   - product_id:  产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.invalid_order_client              = 订单的客户信息错误：{order_id}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_PASSWORD_FORMAT
# Exception:  InvalidPasswordFormatException
# Parameters:
#   - requirement: 合法密码的格式要求，以文字形式描述
#   - min_length:  合法密码的最小长度
#   - max_length:  合法密码的最大长度
################################################################################
error.invalid_password_format           = 密码格式错误，{requirement}，\
且最少{min_length}个字符，最多{max_length}个字符

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_PHONE_FORMAT
# Exception:  InvalidFieldFormatException
# Parameters:
#   - field:  指定的属性名，这里应固定为"phone"或"mobile"
#   - value:  错误的属性值，即错误的电话号码
################################################################################
error.invalid_phone_format              = 手机号码格式错误：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_PRICE
# Exception:  InvalidPriceException
# Parameters:
#   - product_id:  产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.invalid_price                     = 产品价格错误：{product_name}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_PRODUCT_COUNT
# Exception:  InvalidProductCountException
# Parameters:
#   - product_id:  产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.invalid_product_count             = 产品数量错误：{product_name}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_REFUNDABLE
# Exception:  InvalidRefundableException
# Parameters:
#   - product_id:  产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
#   - expected_refundable: 期望的退款金额
#   - actual_refundable: 实际的退款金额
################################################################################
error.invalid_refundable                = 产品{product_name}的退款金额错误，\
应该为：¥{expected_refundable}，实际为：¥{actual_refundable}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_SIGNATURE
# Exception:  InvalidSignatureException
# Parameters:
#   - message:    被签名的消息
#   - signature:  错误的签名
################################################################################
error.invalid_signature                 = 错误的数字签名: {signature}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_STATUS
# Exception:  InvalidStatusException
# Parameters:
#   - entity: 拥有令牌的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - status_class:  状态枚举类的完整类名，包含包名
#   - status: 状态枚举的名称
################################################################################
error.invalid_status                    = {entity}的状态错误，请与系统管理员联系：{status}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.INVALID_TOKEN
# Exception:  InvalidAccessTokenException
# Parameters:
#   - entity: 拥有令牌的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - token:  错误的令牌
################################################################################
error.invalid_token                     = {entity}的令牌不正确: {token}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.INVALID_TYPE
# Exception:  InvalidTypeException
# Parameters:
#   - entity: 指定的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - expected_type: 期望的类型名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - actual_type: 实际的类型名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.invalid_type                      = {entity}的类型错误，应该是{expected_type}，\
实际是{actual_type}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.INVALID_USERNAME_FORMAT
# Exception:  InvalidUsernameFormatException
# Parameters:
#   - requirement: 合法用户名的格式要求，以文字形式描述
#   - min_length:  合法用户名的最小长度
#   - max_length:  合法用户名的最大长度
################################################################################
error.invalid_username_format           = 用户名格式错误，{requirement}，\
且最少{min_length}个字符，最多{max_length}个字符

################################################################################
# Error Type: ErrorType.IO_ERROR
# Error Code: ErrorCode.IO_ERROR
# Exception:  ServerSideIoException, IOException
# Parameters:
#   - message: 详细的错误信息
################################################################################
error.io_error                          = 服务器发生I/O错误：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.LIMITATION_REACHED
# Exception:  None                      [TODO: 增加对应的异常类]
# Parameters:
#   - entity: 被操作的的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - operation: 执行的操作名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - limit: 操作的限制，通常为数字。
################################################################################
error.limitation_reached                = 对{entity}的操作\"{operation}\"超出系统的限制：{limit}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.LOCKED
# Exception:  EntityLockedException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.locked                            = 指定的{entity}已被锁定，请与系统管理员联系：{value}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.LOGIN_REQUIRED
# Exception:  LoginRequiredException
# Parameters: None
################################################################################
error.login_required                    = 当前用户尚未登录或会话已过期，请重新登录

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.LOGOUT_REQUIRED
# Exception:  LogoutRequiredException
# Parameters: None
################################################################################
error.logout_required                   = 您需要注销当前登录用户才能执行此操作

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MAKE_FRIEND_WITH_SELF
# Exception:  MakeFriendWithSelfException
# Parameters: None
################################################################################
error.make_friend_with_self             = 您不能将自己加为好友

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MEDICAL_SERVICE_NOT_APPOINTMENT
# Exception:  MedicalServiceNotAppointmentException [TODO: 改为 ServiceNotAppointmentException]
# Parameters: None
################################################################################
error.medical_service_not_appointment   = 服务未预约，不可核销

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MEDICAL_SERVICE_COUNT_ZERO
# Exception:  MedicalServiceCountZeroException  [TODO: 改个更清晰的名字]
# Parameters: None
################################################################################
error.medical_service_count_zero        = 服务可用次数为零

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_BIRTHDAY
# Exception:  MismatchBirthdayException
# Parameters:
#   - credential_type: 指定的人的证件类型枚举值名称，需要转化为i18n名称
#   - credential_number: 指定的人的证件号码
#   - expected_birthday: 期望值
#   - actual_birthday: 实际值
################################################################################
error.mismatch_birthday                 = {credential_type}号码为{credential_number}\
的客户出生日期错误，应该为{expected_birthday}，实际为{actual_birthday}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_CREDENTIAL
# Exception:  MismatchCredentialException
# Parameters:
#   - name: 指定的人的姓名
#   - expected_credential_type: 期望的证件类型枚举值名称，需要转化为i18n名称
#   - expected_credential_number: 期望的证件号码
#   - actual_credential_type: 实际的证件类型枚举值名称，需要转化为i18n名称
#   - actual_credential_number: 实际的证件号码
################################################################################
error.mismatch_credential               = {name}的证件错误，\
应该为{expected_credential_type}，号码 {expected_credential_number}；\
实际为{actual_credential_type}，号码 {actual_credential_number}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_CURRENCY
# Exception:  MismatchCurrencyException
# Parameters:
#   - expected_currency: 期望的货币单位
#   - actual_currency: 实际的货币单位
################################################################################
error.mismatch_currency                 = 货币单位不匹配。应该是：{expected_currency}，\
实际为：{actual_currency}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_CURRENCY
# Exception:  MismatchCurrencyException
# Parameters:
#   - name: 指定的人的姓名
#   - expected_email: 期望的电子邮件地址
#   - actual_email: 实际的电子邮件地址
################################################################################
error.mismatch_email                    = {name}的电子邮箱错误，应该为{expected_email}，\
实际为{actual_email}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_GENDER
# Exception:  MismatchGenderException
# Parameters:
#   - credential_type: 指定的人的证件类型枚举值名称，需要转化为i18n名称
#   - credential_number: 指定的人的证件号码
#   - expected_gender: 期望的性别
#   - actual_gender: 实际的性别
################################################################################
error.mismatch_gender                   = {credential_type}号码为{credential_number}\
的客户性别错误，应该为{expected_gender}，实际为{actual_gender}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_MOBILE
# Exception:  MismatchMobileException
# Parameters:
#   - name: 指定的人的姓名
#   - expected_mobile: 期望的手机号码
#   - actual_mobile: 实际的手机号码
################################################################################
error.mismatch_mobile                   = {name}的手机号码错误，\
应该为{expected_mobile}，实际为{actual_mobile}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_PAYMENT
# Exception:  MismatchPaymentException
# Parameters:
#   - transaction_id: 对应的交易的ID
#   - payment_number：支付流水号
#   - payment_channel_number：支付渠道流水号
#   - currency: 货币单位
#   - success：是否支付成功
#   - payable：应付金额
#   - discount：折扣金额
#   - cost：渠道手续费
#   - paid：实付金额
################################################################################
error.mismatch_payment                  = 支付信息和交易记录不匹配。\
交易流水号：{transaction_id}，支付流水号：{payment_number}，\
第三方支付流水号：{payment_channel_number}，\
货币单位：{currency}，支付结果：{success}，\
应付金额：¥{payable}，折扣：¥{discount}，手续费：¥{cost}，实付金额：¥{paid}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MISMATCH_PERSON_NAME
# Exception:  MismatchPersonNameException
# Parameters:
#   - expected_name: 期望的姓名
#   - actual_name: 实际的姓名
################################################################################
error.mismatch_person_name              = 姓名错误，应该为{expected_name}，实际为{actual_name}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.MUST_BUY_FOR_SELF
# Exception:  MustBuyForSelfException
# Parameters:
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.must_buy_for_self                 = 您只能为自己购买{product_name}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.NO_ENOUGH_INVENTORY
# Exception:  NoEnoughInventoryException
# Parameters:
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
#   - expected: 期望的产品数量
#   - actual: 实际的产品库存数量
################################################################################
error.no_enough_inventory               = {product_name}没有足够的库存：\
需要{expected}份，实际只有{actual}份

################################################################################
# Error Type: ErrorType.AUTHORIZATION_ERROR
# Error Code: ErrorCode.NO_PRIVILEGE
# Exception:  NoPrivilegeException
# Parameters:
#   - operation: 执行的操作名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - entity: 被操作的的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.no_privilege                      = 当前用户没有足够的权限进行该操作：{operation}{entity}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.NOT_DELETED
# Exception:  EntityNotDeletedException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.not_deleted                       = 指定的{entity}未被删除：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.NOT_EXIST
# Exception:  DataNotExistException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.not_exist                         = 指定的{entity}不存在：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.NOT_PURCHASED
# Exception:  NotPurchasedException
# Parameters:
#   - buyer_name: 购买者姓名
#   - buyer_mobile: 购买者手机号码
#   - buyer_credential_type: 购买者证件类型
#   - buyer_credential_number: 购买者证件号码
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.not_purchased                     = {buyer_name}尚未购买过{product_name}

################################################################################
# Error Type: None
# Error Code: ErrorCode.NONE
# Exception:  None
# Parameters: None
################################################################################
error.none                              = 没有错误

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.OBSOLETED
# Exception:  EntityObsoletedException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.obsoleted                         = 指定的{entity}已被废弃，请与系统管理员联系：{value}

################################################################################
# Error Type: ErrorType.AUTHORIZATION_ERROR
# Error Code: ErrorCode.OPERATION_FORBIDDEN
# Exception:  OperationForbiddenException
# Parameters:
#   - operation: 执行的操作名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - entity: 被操作的的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.operation_forbidden               = 此操作被当前的设置所禁止：{operation}{entity}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.OPERATION_TOO_FREQUENT
# Exception:  OperationTooFrequentException
# Parameters:
#   - operation: 执行的操作名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - entity: 被操作的的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.operation_too_frequent            = 操作太频繁，请稍后重试：{operation}{entity}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.OPPOSITE_IS_SELF
# Exception:  OppositeIsSelfException   [TODO: 这个有什么用？]
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.opposite_is_self                  = {entity}不能与其自己对立

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.ORDER_EXPIRED
# Exception:  OrderExpiredException
# Parameters:
#   - order_id: 指定的订单的ID
################################################################################
error.order_expired                     = 订单已过期失效：{order_id}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.PAID_MONEY_MISMATCH
# Exception:  PaidMoneyMismatchException
# Parameters:
#   - transaction_id: 对应的交易的ID
#   - payment_number：支付流水号
#   - payment_channel_number：支付渠道流水号
#   - currency: 货币单位
#   - success：是否支付成功
#   - payable：应付金额
#   - discount：折扣金额
#   - cost：渠道费用
#   - paid：实付金额
################################################################################
error.paid_money_mismatch               = 应付金额和实付金额不匹配。\
交易流水号：{transaction_id}，支付流水号：{payment_number}，\
第三方支付流水号：{payment_channel_number}，\
货币单位：{currency}，\
支付结果：{success}，\
应付金额：¥{payable}，折扣：¥{discount}，手续费：¥{cost}，实付金额：¥{paid}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.PARENT_IS_SELF
# Exception:  ParentIsSelfException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.parent_is_self                    = {entity}的父对象不能是它本身

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.PASSWORD_MISMATCH
# Exception:  PasswordMismatchException
# Parameters:
#   - username: 指定的用户的用户名
################################################################################
error.password_mismatch                 = 密码不正确，请重新输入

################################################################################
# Error Type: ErrorType.THIRD_PART_ERROR
# Error Code: ErrorCode.PHARMACY_CLIENT_FAILURE
# Exception:  None                     [FIXME: 没有对应异常类，这个错误代码在哪里用到？另外名称不够清晰]
# Parameters:
#   - message: 详细的错误信息
################################################################################
error.pharmacy_client_failure           = 药房系统连接失败：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.PRESCRIPTION_CANNOT_RETURN
# Exception:  None                     [TODO: 增加对应的异常类]
# Parameters:
#   - prescription_id: 处方单的ID
#   - prescription_status: 处方单的状态，为枚举值，必须转化为i18n名称
#   - prescription_status_class: 处方单状态枚举类的类名全称
################################################################################
error.prescription_cannot_return        = 处方单 {prescription_id} 状态\
为 {prescription_status}，不能退单

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.PRESCRIPTION_CANNOT_FIND_SELLER
# Exception:  None                      [TODO: 增加对应的异常类]
# Parameters:
#   - prescription_id: 处方单的ID
################################################################################
error.prescription_cannot_find_seller   = 处方单 {prescription_id} 没有找到可供货药店

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.PRODUCT_CANNOT_RETURN
# Exception:  ProductCannotReturnException
# Parameters:
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.product_cannot_return             = 该产品不能退货：{product_name}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.READONLY
# Exception:  ReadonlyEntityException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.readonly                          = 指定的{entity}是只读的：{value}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.REFER_TO_NON_EXIST_FOREIGN_KEY
# Exception:  ForeignKeyConstraintFailException
# Parameters:
#   - field: 指定的属性名，以 lowercase underscore 字符串形式表示，
#     需要进一步转换为i18n名称
#   - reference_entity: 引用的对象的类名，以 lowercase underscore 字符串形式表示，需要
#     进一步转换为i18n名称
#   - reference_field:  引用的对象的属性名，以 lowercase underscore 字符串形式表示，需
#     要进一步转换为i18n名称
################################################################################
error.refer_to_non_exist_foreign_key    = {field}的取值引用了一个不存在的\
{reference_entity}的{reference_field}

################################################################################
# Error Type: ErrorType.SERVER_ERROR
# Error Code: ErrorCode.REQUEST_METHOD_NOT_SUPPORTED
# Exception:  HttpRequestMethodNotSupportedException
# Parameters:
#   - request_method: 请求的方法名称
#   - supported_methods: 支持的方法名称列表
################################################################################
error.request_method_not_supported      = 请求的方法'{request_method}'不被支持，\
支持的方法为：{supported_methods}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.RETURNED_PURCHASE_AGAIN
# Exception:  ReturnedPurchaseAgainException
# Parameters:
#   - buyer_name: 购买者姓名
#   - buyer_mobile: 购买者手机号码
#   - buyer_credential_type: 购买者证件类型
#   - buyer_credential_number: 购买者证件号码
#   - product_id: 产品ID
#   - product_code: 产品编码
#   - product_name: 产品名称
################################################################################
error.returned_purchase_again           = {buyer_name}（手机号码{buyer_mobile}）\
已购买过{product_name}并已申请退费，无法再次购买。如有疑问，请咨询客服，谢谢！

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.REVIEWED
# Exception:  EntityReviewedException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.reviewed                          = {entity}已经被审核过，不可被修改或删除：{value}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.SECURITY_KEY_MISMATCH
# Exception:  SecurityKeyMismatchException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
################################################################################
error.security_key_mismatch             = {entity}的安全密钥不正确：{value}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.SELLING_NOT_START
# Exception:  SellingNotStartException  [TODO: 增加产品信息作为异常类参数]
# Parameters:
#   - now: 当前时间
#   - from: 开始销售时间
#   - until: 结束销售时间
################################################################################
error.selling_not_start                 = 该产品的销售尚未开始

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.SELLING_HAS_END
# Exception:  SellingHasEndException  [TODO: 增加产品信息作为异常类参数]
# Parameters:
#   - now: 当前时间
#   - from: 开始销售时间
#   - until: 结束销售时间
################################################################################
error.selling_has_end                   = 该产品的销售已经结束

################################################################################
# Error Type: ErrorType.THIRD_PART_ERROR
# Error Code: ErrorCode.SEND_EMAIL_FAILED
# Exception:  None                      [TODO: 实现对应的异常类]
# Parameters:
#   - error_code: 错误代码
#   - message:    具体的错误信息
################################################################################
error.send_email_failed                 = 发送邮件失败：{message}

################################################################################
# Error Type: ErrorType.THIRD_PART_ERROR
# Error Code: ErrorCode.SEND_SMS_FAILED
# Exception:  SmsException
# Parameters:
#   - error_code: 错误代码
#   - message:    具体的错误信息
################################################################################
error.send_sms_failed                   = 发送手机短信失败：{message}

################################################################################
# Error Type: ErrorType.THIRD_PART_ERROR
# Error Code: ErrorCode.SEND_SMS_FAILED
# Exception:  SmsException
# Parameters:
#   - message:    具体的错误信息
################################################################################
error.service_failure                   = 调用第三方服务失败：{message}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.SESSION_EXPIRED
# Exception:  SessionExpiredException
# Parameters: None
################################################################################
error.session_expired                   = 您的会话已过期，请重新登录

################################################################################
# Error Type: ErrorType.SERVER_ERROR,
# Error Code: ErrorCode.SIGN_MESSAGE_FAILED
# Exception:  SignMessageFailedException
# Parameters:
#   - message: 具体的错误信息
################################################################################
error.sign_message_failed               = 进行数字签名时操作失败：{message}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.TARGET_IS_SELF
# Exception:  TargetIsSelfException
# Parameters:
#   - operation: 执行的操作名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - entity: 被操作的的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.target_is_self                    = {entity}不能对自己进行{operation}操作

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.TOKEN_EXPIRED
# Exception:  AccessTokenExpiredException
# Parameters:
#   - entity: 拥有令牌的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - token:  错误的令牌
################################################################################
error.token_expired                     = {entity}的令牌已过期：{token}

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.TOO_MANY_LOGIN_FAILURES
# Exception:  TooManyLoginFailuresException
# Parameters:
#   - username:  进行登录操作的用户的用户名
#   - duration:  允许重新登录需要等待的时间，单位为秒；注意这个时间值需要格式化为可读的时间单位
################################################################################
error.too_many_login_failures           = 您在短时间内连续多次输入密码错误，\
为了保证您的账号安全，系统已将您的账号临时性锁定；您可以在{duration}后再尝试登录，\
或者选择忘记密码进行密码重置

################################################################################
# Error Type: ErrorType.AUTHENTICATION_ERROR
# Error Code: ErrorCode.TOO_MANY_AUTHENTICATION_FAILURES
# Exception:  TooManyAuthenticationFailuresException
# Parameters:
#   - entity: 指定的对象的类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - key:    指定的对象的主键名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - value:  指定的对象的主键值
#   - duration: 允许重新认证需要等待的时间，单位为秒；注意这个时间值需要格式化为可读的时间单位
################################################################################
error.too_many_authentication_failures  = “{value}”在短时间内连续多次认证错误，\
出于安全考虑，系统将暂时禁止该{entity}的认证操作，请在{duration}后再重新尝试

################################################################################
# Error Type: None
# Error Code: ErrorCode.UNKNOWN        [TODO: 是否需要这个错误代码?]
# Exception:  None
# Parameters: None
################################################################################
error.unknown                           = 发生未知错误，请与系统管理员联系

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.UNNECESSARY_OPERATION
# Exception:  None                      [TODO: 增加对应的异常类]
# Parameters:
#   - operation: 执行的操作名称，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
#   - entity: 被操作的的实体类名，以 lowercase underscore 字符串形式表示，需要进一步转换为i18n名称
################################################################################
error.unnecessary_operation             = 对{entity}进行{operation}是不必要的

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.UNQUALIFIED_RENEWAL
# Exception:  UnqualifiedRenewalException
# Parameters:
#   - client_name: 客户姓名
#   - client_credential_type: 客户证件类型
#   - client_credential_number: 客户证件号码
################################################################################
error.unqualified_renewal               = 被保人{client_name}不具有续保条件，\
请确保其证件类型和证件号与去年投保信息一致

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.UNSUPPORTED_CLASS
# Exception:  UnsupportedClassException
# Parameters:
#   - class: 指定的类的完整名称，包括包名
################################################################################
error.unsupported_class                 = 不支持的类：{class}

################################################################################
# Error Type: ErrorType.REQUEST_ERROR
# Error Code: ErrorCode.UNSUPPORTED_CONTENT_TYPE
# Exception:  UnsupportedContentTypeException, HttpMediaTypeNotSupportedException
# Parameters:
#   - content_type: 错误的 Content-Type
################################################################################
error.unsupported_content_type          = HTTP请求头的 Content-Type 字段设置错误: {content_type}

################################################################################
# Error Type: ErrorType.REQUEST_ERROR
# Error Code: ErrorCode.UNSUPPORTED_FILE_TYPE
# Exception:  UnsupportedFileTypeException
# Parameters:
#   - content_type: 错误文件的 Content-Type
################################################################################
error.unsupported_file_type             = 此操作不支持该类型的文件：{content_type}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.UNSUPPORTED_VERSION
# Exception:  UnsupportedVersionException
# Parameters:
#   - version: 不支持的版本号
################################################################################
error.unsupported_version               = 不支持此版本：{version}

################################################################################
# Error Type: ErrorType.REQUEST_ERROR
# Error Code: ErrorCode.UPLOAD_FILE_TOO_LARGE
# Exception:  UploadFileTooLargeException
# Parameters:
#   - max_allowed_file_size: 最大允许的文件的大小，单位为字节；需要被格式化为可读的大小；
#   - actual_file_size: 实际上传的文件的大小，单位为字节；需要被格式化为可读的大小；
################################################################################
error.upload_file_too_large             = 您所上传的文件太大了：允许的最大大小为\
{max_allowed_file_size}，实际大小为{actual_file_size}

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.USERNAME_OCCUPIED
# Exception:  None                      [TODO: 增加对应的异常类]
# Parameters:
#   - username: 已被占用的用户名
################################################################################
error.username_occupied                 = 用户名 “{username}” 已被占用

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.VERIFY_CODE_EXPIRED
# Exception:  VerifyCodeExpiredException
# Parameters: None
################################################################################
error.verify_code_expired               = 验证码未发送或已过期失效，请重新发送验证码

################################################################################
# Error Type: ErrorType.LOGIC_ERROR
# Error Code: ErrorCode.VERIFY_CODE_MISMATCH
# Exception:  VerifyCodeMismatchException
# Parameters: None
################################################################################
error.verify_code_mismatch              = 验证码不正确或已过期失效，您可以尝试重新发送验证码

################################################################################
# Error Type: ErrorType.SERVER_ERROR,
# Error Code: ErrorCode.VERIFY_SIGNATURE_FAILED
# Exception:  VerifySignatureFailedException
# Parameters:
#   - message: 具体的错误信息
################################################################################
error.verify_signature_failed           = 验证数字签名时操作失败：{message}
